
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package co.edu.eafit.dis.st0270.s20191.kevingg.parser;

import java_cup.runtime.*;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.ASTfbf;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.ASTterm;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.Loprior;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.PredicateNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.ForallNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.ExistentialNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.NegationNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.AndNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.OrNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.ConditionalNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.BiconditionalNode;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.Nom;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.Var;
import co.edu.eafit.dis.st0270.s20191.kevingg.abs.Func;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class LopriorParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LopriorSymbol.class;
}

  /** Default constructor. */
  @Deprecated
  public LopriorParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public LopriorParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LopriorParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\007\000\002\003\007\000\002\003\007\000" +
    "\002\003\007\000\002\005\005\000\002\005\003\000\002" +
    "\004\006\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\014\007\007\010\004\011\006\012\012\017" +
    "\010\001\002\000\004\005\050\001\002\000\004\002\047" +
    "\001\002\000\004\005\045\001\002\000\004\017\031\001" +
    "\002\000\014\007\007\010\004\011\006\012\012\017\010" +
    "\001\002\000\004\002\000\001\002\000\014\007\007\010" +
    "\004\011\006\012\012\017\010\001\002\000\016\002\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc\001\002\000" +
    "\012\013\020\014\016\015\015\016\017\001\002\000\014" +
    "\007\007\010\004\011\006\012\012\017\010\001\002\000" +
    "\014\007\007\010\004\011\006\012\012\017\010\001\002" +
    "\000\014\007\007\010\004\011\006\012\012\017\010\001" +
    "\002\000\014\007\007\010\004\011\006\012\012\017\010" +
    "\001\002\000\004\020\022\001\002\000\016\002\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\001\002\000\004" +
    "\020\024\001\002\000\016\002\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\020\ufffa\001\002\000\004\020\026\001\002" +
    "\000\016\002\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\020" +
    "\ufff8\001\002\000\004\020\030\001\002\000\016\002\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\020\ufffb\001\002\000" +
    "\010\004\035\005\036\006\032\001\002\000\004\017\042" +
    "\001\002\000\006\020\ufff6\021\040\001\002\000\004\020" +
    "\037\001\002\000\006\020\ufff4\021\ufff4\001\002\000\006" +
    "\020\ufff3\021\ufff3\001\002\000\016\002\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\020\uffff\001\002\000\010\004\035" +
    "\005\036\006\032\001\002\000\004\020\ufff7\001\002\000" +
    "\010\004\035\005\036\006\032\001\002\000\004\020\044" +
    "\001\002\000\006\020\ufff5\021\ufff5\001\002\000\014\007" +
    "\007\010\004\011\006\012\012\017\010\001\002\000\016" +
    "\002\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe\001" +
    "\002\000\004\002\001\001\002\000\014\007\007\010\004" +
    "\011\006\012\012\017\010\001\002\000\016\002\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\002\004\003\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\013\001\001\000\002\001\001\000\004\003" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\026\001\001\000\004\003\024\001\001\000\004\003" +
    "\022\001\001\000\004\003\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\032\005\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\032\005" +
    "\040\001\001\000\002\001\001\000\006\004\032\005\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\050\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LopriorParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LopriorParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LopriorParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$LopriorParser$actions {
  private final LopriorParser parser;

  /** Constructor */
  CUP$LopriorParser$actions(LopriorParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$LopriorParser$do_action_part00000000(
    int                        CUP$LopriorParser$act_num,
    java_cup.runtime.lr_parser CUP$LopriorParser$parser,
    java.util.Stack            CUP$LopriorParser$stack,
    int                        CUP$LopriorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LopriorParser$result;

      /* select the action based on the action number */
      switch (CUP$LopriorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= loprior EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ASTfbf start_val = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		RESULT = start_val;
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LopriorParser$parser.done_parsing();
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // loprior ::= formulaWF 
            {
              ASTfbf RESULT =null;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		ASTfbf formula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 RESULT = new Loprior(formula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("loprior",0, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formulaWF ::= PREDICATE LPAREN listTerm RPAREN 
            {
              ASTfbf RESULT =null;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ArrayList<ASTterm> list = (ArrayList<ASTterm>)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		 RESULT = new PredicateNode((String) predicate, list); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formulaWF ::= FORALL VARIABLE formulaWF 
            {
              ASTfbf RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		ASTfbf formula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 RESULT = new ForallNode((String) variable, formula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-2)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formulaWF ::= EXISTENTIAL VARIABLE formulaWF 
            {
              ASTfbf RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		ASTfbf formula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 RESULT = new ExistentialNode((String) variable, formula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-2)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formulaWF ::= NEGATION formulaWF 
            {
              ASTfbf RESULT =null;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		ASTfbf formula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 RESULT = new NegationNode(formula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formulaWF ::= LPAREN formulaWF AND formulaWF RPAREN 
            {
              ASTfbf RESULT =null;
		int leftFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).left;
		int leftFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).right;
		ASTfbf leftFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).value;
		int rightFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int rightFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ASTfbf rightFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		 RESULT = new AndNode(leftFormula, rightFormula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-4)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formulaWF ::= LPAREN formulaWF OR formulaWF RPAREN 
            {
              ASTfbf RESULT =null;
		int leftFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).left;
		int leftFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).right;
		ASTfbf leftFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).value;
		int rightFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int rightFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ASTfbf rightFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		 RESULT = new OrNode(leftFormula, rightFormula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-4)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formulaWF ::= LPAREN formulaWF CONDITIONAL formulaWF RPAREN 
            {
              ASTfbf RESULT =null;
		int leftFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).left;
		int leftFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).right;
		ASTfbf leftFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).value;
		int rightFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int rightFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ASTfbf rightFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		 RESULT = new ConditionalNode(leftFormula, rightFormula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-4)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formulaWF ::= LPAREN formulaWF BICONDITIONAL formulaWF RPAREN 
            {
              ASTfbf RESULT =null;
		int leftFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).left;
		int leftFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).right;
		ASTfbf leftFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).value;
		int rightFormulaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int rightFormularight = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ASTfbf rightFormula = (ASTfbf)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		 RESULT = new BiconditionalNode(leftFormula, rightFormula); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("formulaWF",1, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-4)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listTerm ::= term COMMA listTerm 
            {
              ArrayList<ASTterm> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-2)).right;
		ASTterm t = (ASTterm)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		ArrayList<ASTterm> lista = (ArrayList<ASTterm>)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 lista.add(t); RESULT = lista; 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("listTerm",3, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-2)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listTerm ::= term 
            {
              ArrayList<ASTterm> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		ASTterm t = (ASTterm)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 ArrayList<ASTterm> lista = new ArrayList(); lista.add(t); RESULT = lista; 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("listTerm",3, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= FUNCTOR LPAREN listTerm RPAREN 
            {
              ASTterm RESULT =null;
		int functorleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).left;
		int functorright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).right;
		Object functor = (Object)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).right;
		ArrayList<ASTterm> list = (ArrayList<ASTterm>)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-1)).value;
		 RESULT = new Func((String) functor, list); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.elementAt(CUP$LopriorParser$top-3)), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= NAME 
            {
              ASTterm RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 RESULT = new Nom((String) name); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= VARIABLE 
            {
              ASTterm RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()).right;
		Object variable = (Object)((java_cup.runtime.Symbol) CUP$LopriorParser$stack.peek()).value;
		 RESULT = new Var((String) variable); 
              CUP$LopriorParser$result = parser.getSymbolFactory().newSymbol("term",2, ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LopriorParser$stack.peek()), RESULT);
            }
          return CUP$LopriorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$LopriorParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$LopriorParser$do_action(
    int                        CUP$LopriorParser$act_num,
    java_cup.runtime.lr_parser CUP$LopriorParser$parser,
    java.util.Stack            CUP$LopriorParser$stack,
    int                        CUP$LopriorParser$top)
    throws java.lang.Exception
    {
              return CUP$LopriorParser$do_action_part00000000(
                               CUP$LopriorParser$act_num,
                               CUP$LopriorParser$parser,
                               CUP$LopriorParser$stack,
                               CUP$LopriorParser$top);
    }
}

}
